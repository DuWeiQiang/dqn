name: "Deep_Q-Network"
layer {
  name: "frames_input_layer"
  type: "MemoryData"
  top: "frames"
  top: "dummy_frames"
  memory_data_param {
    batch_size: 32
    channels: 1
    height: 84
    width: 84
  }
  include { phase: TRAIN }
}
layer {
  name: "frames_input_layer"
  type: "MemoryData"
  top: "frame_0"
  top: "dummy_frames"
  memory_data_param {
    batch_size: 32
    channels: 1
    height: 84
    width: 84
  }
  include { phase: TEST }
}
layer {
  name: "cont_input_layer"
  type: "MemoryData"
  top: "cont_input"
  top: "dummy_cont"
  memory_data_param {
    batch_size: 1
    channels: 32
    height: 1
    width: 1
  }
}
layer {
  name: "target_input_layer"
  type: "MemoryData"
  top: "target"
  top: "dummy_target"
  memory_data_param {
    batch_size: 1
    channels: 32
    height: 18
    width: 1
  }
}
layer {
  name: "filter_input_layer"
  type: "MemoryData"
  top: "filter"
  top: "dummy_filter"
  memory_data_param {
    batch_size: 1
    channels: 32
    height: 18
    width: 1
  }
}
layer {
  name: "filter_reshape"
  type: "Reshape"
  bottom: "filter"
  top: "reshaped_filter_input"
  reshape_param {
    shape {
      dim: 1
      dim: 32
      dim: 18
    }
  }
}
layer {
  name: "silence_layer"
  type: "Silence"
  bottom: "dummy_frames"
  bottom: "dummy_cont"
  bottom: "dummy_filter"
  bottom: "dummy_target"
  bottom: "cont_input"
}
layer {
  name: "conv1_layer_0"
  type: "Convolution"
  bottom: "frames"
  top: "conv1_0"
  param {
    name: "conv1_w"
    lr_mult: 1
    decay_mult: 1
  }
  param {
    name: "conv1_b"
    lr_mult: 2
    decay_mult: 0
  }
  convolution_param {
    num_output: 16
    kernel_size: 8
    stride: 4
    weight_filler {
      type: "gaussian"
      std: 0.01
    }
    bias_filler {
      type: "constant"
      value: 0
    }
  }
  include { phase: TRAIN }
}
layer {
  name: "conv1_layer_0"
  type: "Convolution"
  bottom: "frame_0"
  top: "conv1_0"
  param {
    name: "conv1_w"
    lr_mult: 1
    decay_mult: 1
  }
  param {
    name: "conv1_b"
    lr_mult: 2
    decay_mult: 0
  }
  convolution_param {
    num_output: 16
    kernel_size: 8
    stride: 4
    weight_filler {
      type: "gaussian"
      std: 0.01
    }
    bias_filler {
      type: "constant"
      value: 0
    }
  }
  include { phase: TEST }
}
layer {
  name: "conv1_relu_layer_0"
  type: "ReLU"
  bottom: "conv1_0"
  top: "conv1_0"
  relu_param {
    negative_slope: 0.01
  }
}
layer {
  name: "conv2_layer_0"
  type: "Convolution"
  bottom: "conv1_0"
  top: "conv2_0"
  param {
    name: "conv2_w"
    lr_mult: 1
    decay_mult: 1
  }
  param {
    name: "conv2_b"
    lr_mult: 2
    decay_mult: 0
  }
  convolution_param {
    num_output: 32
    kernel_size: 4
    stride: 2
    weight_filler {
      type: "gaussian"
      std: 0.01
    }
    bias_filler {
      type: "constant"
      value: 0
    }
  }
}
layer {
  name: "conv2_relu_layer_0"
  type: "ReLU"
  bottom: "conv2_0"
  top: "conv2_0"
  relu_param {
    negative_slope: 0.01
  }
}
layer {
  name: "ip1_layer_0"
  type: "InnerProduct"
  bottom: "conv2_0"
  top: "ip1_0"
  param {
    name: "ip1_w"
    lr_mult: 1
    decay_mult: 1
  }
  param {
    name: "ip1_b"
    lr_mult: 2
    decay_mult: 0
  }
  inner_product_param {
    num_output: 256
    weight_filler {
      type: "gaussian"
      std: 0.005
    }
    bias_filler {
      type: "constant"
      value: 1
    }
  }
}
layer {
  name: "ip1_relu_layer_0"
  type: "ReLU"
  bottom: "ip1_0"
  top: "ip1_0"
  relu_param {
    negative_slope: 0.01
  }
}
layer {
  name: "ip1_reshape"
  type: "Reshape"
  bottom: "ip1_0"
  top: "reshaped_ip1"
  reshape_param {
    shape {
      dim: 1
      dim: 32
      dim: 256
    }
  }
}
layer {
  name: "ip2_layer"
  type: "InnerProduct"
  bottom: "reshaped_ip1"
  top: "q_values"
  param {
    lr_mult: 1
    decay_mult: 1
  }
  param {
    lr_mult: 2
    decay_mult: 0
  }
  inner_product_param {
    num_output: 18
    weight_filler {
      type: "gaussian"
      std: 0.01
    }
    axis: 2
  }
}
layer {
  name: "eltwise_layer"
  type: "Eltwise"
  bottom: "q_values"
  bottom: "reshaped_filter_input"
  top: "filtered_q_values"
  eltwise_param {
    operation: PROD
  }
}
layer {
  name: "loss"
  type: "EuclideanLoss"
  bottom: "filtered_q_values"
  bottom: "target"
  top: "loss"
}
